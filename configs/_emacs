(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(column-number-mode t)
 '(ecb-options-version "2.40")
 '(ecb-primary-secondary-mouse-buttons (quote mouse-1--C-mouse-1))
 '(session-use-package t)
 '(show-paren-mode t)
 '(size-indication-mode t)
 '(tool-bar-mode nil))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(default ((t (:family "DejaVu Sans YuanTi Mono" :foundry "unknown" :slant normal :weight normal :height 81 :width normal)))))

(add-to-list 'load-path "~/.emacs.d/elisp")
(require 'color-theme)
(color-theme-initialize)
(color-theme-tangotango)

;;;;;;;;;; cedet ;;;;;;;;;;
(add-to-list 'load-path "~/.emacs.d/plugins/cedet-1.1/common")
(require 'cedet)
(semantic-load-enable-minimum-features)
(semantic-load-enable-code-helpers)
(semantic-load-enable-guady-code-helpers)
(semantic-load-enable-excessive-code-helpers)
(semantic-load-enable-semantic-debugging-helpers) 
(setq semanticdb-default-save-directory "~/.emacs.tmp/semantic.cache")
(setq semanticdb-project-roots (list (expand-file-name "/")))
(setq-default semantic-idle-scheduler-idle-time 432000)

;;;;;;;;;; ecb ;;;;;;;;;;
(add-to-list 'load-path "~/.emacs.d/plugins/ecb-2.40")
(require 'ecb)
(require 'ecb-autoloads)
(setq ecb-tip-of-the-day nil 
      ecb-tree-indent 4 
      ecb-windows-height 0.1
      ecb-windows-width 0.2)

(ecb-layout-define "my-cscope-layout" left nil  
;		   (ecb-split-ver 0.5 t)
;		   (other-window 1)
		   (ecb-set-methods-buffer)  
		   ;-----------------------
		;--------------------------------------------------
		;    (ecb-split-ver 0.8 t)  
		;    (other-window 1)  
		;    (ecb-set-sources-buffer) 
		;-------------------------------------------------- 
		   ;-----------------------
		   (ecb-split-ver 0.6 t)
		   (other-window 1)
		   (ecb-set-history-buffer) 
		   ;-----------------------
		   (ecb-split-ver 0.2 t)
		   (other-window 1)
		   (ecb-set-cscope-buffer)
		   )
(defecb-window-dedicator ecb-set-cscope-buffer " *ECB cscope-buf*"
			 (switch-to-buffer "*cscope*"))
(setq ecb-history-make-buckets 'never)
(setq ecb-layout-name "my-cscope-layout")  
(global-set-key [f11] 'ecb-toggle-ecb-windows)
;(ecb-activate)

;;;;;;;;;; cscope ;;;;;;;;;;
(require 'xcscope) ;;加载xcscope
(defun hide-cscope-buffer ()
 (delete-windows-on *cscope*))

(global-set-key (kbd "<f1> s") 'cscope-find-this-symbol)
(global-set-key (kbd "<f1> d") 'cscope-find-global-definition)
(global-set-key (kbd "<f1> c") 'cscope-find-functions-calling-this-function)
(global-set-key (kbd "<f1> f") 'cscope-find-this-file)
(global-set-key (kbd "<f1> m") 'cscope-pop-mark)
(global-set-key (kbd "<f1> n") 'cscope-next-symbol)
(global-set-key (kbd "<f1> p") 'cscope-prev-symbol)
(global-set-key (kbd "<f1> h") 'hide-cscope-buffer)
(global-set-key (kbd "<f1> f") 'cscope-next-file)
(global-set-key (kbd "<f1> b") 'cscope-prev-file)
(global-set-key (kbd "<f1> t") 'cscope-find-this-text-string)
(global-set-key (kbd "<f1> g") 'cscope-find-global-definition-no-prompting)
(global-set-key (kbd "<f1> e") 'cscope-find-egrep-pattern)
(global-set-key (kbd "<f1> i") 'cscope-find-files-including-file)

;;;;;;;;;; misc ;;;;;;;;;;
(add-to-list 'load-path "~/tools/share/emacs/24.1/lisp")

(setq user-full-name "MaYaohui")
(setq user-mail-address "stesenchina@gamil.com")
(setq bookmark-default-file "~/.emacs.d/.emacs.bmk")
(setq abbrev-file-name "~/.emacs.d/.abbrev_defs") 
(setq load-path (cons "~/.emacs.d/elisp" load-path)) 
(setq version-control t) 
(setq delete-old-versions t)
(setq backup-directory-alist '(("." . "~/.emacs.tmp"))) 
(setq backup-by-copying t) 
(setq stack-trace-on-error nil)
(setq initial-scratch-message nil)
(setq inhibit-startup-message t)
(fset 'yes-or-no-p 'y-or-n-p) 
(setq Man-notify-method 'pushy) 
(setq default-fill-column 120) 
(setq scroll-step 1 
      scroll-margin 5 
      scroll-conservatively 10000) 
(setq default-line-spacing 0)
(setq default-major-mode 'text-mode)
(transient-mark-mode t)
(setq show-paren-style 'parentheses)
(setq enable-recursive-minibuffers t)
(setq suggest-key-bindings 1)
(setq tab-always-indent nil)
(global-set-key [M-/] 'hippie-expand)
(setq track-eol t) 
(setq-default kill-whole-line t) 
(setq kill-ring-max 200) 
(setq apropos-do-all t) 
(setq-default ispell-program-name "aspell") 
(put 'narrow-to-region 'disabled nil) 
(setq x-select-enable-clipboard t)
(setq frame-title-format '("%f"))
(setq line-number-mode t)
(setq lazy-lock-defer-on-scrolling t)
(setq font-lock-maximum-decoration t)
(set-clipboard-coding-system 'ctext)
(setq mouse-yank-at-point t);支持中键粘贴
(setq resize-mini-windows nil)

(global-linum-mode t)
(xterm-mouse-mode t)
(auto-image-file-mode) 
(auto-compression-mode 1) 
(column-number-mode t) 

(require 'linum+)
(require 'icomplete+)
(icomplete-mode t)

(require 'redo+) 
;; (require 'igrep)

; auto complete
(add-to-list 'load-path "~/.emacs.d/plugins/auto-complete")  
(require 'auto-complete-config)  
(add-to-list 'ac-dictionary-directories "~/.emacs.d/plugins/auto-complete")  
(ac-config-default) 

(setq skeleton-pair-alist t)
(global-set-key (kbd "[") 'skeleton-pair-insert-maybe)
(global-set-key (kbd "(") 'skeleton-pair-insert-maybe)
(global-set-key (kbd "{") 'skeleton-pair-insert-maybe)
(global-set-key (kbd "<") 'skeleton-pair-insert-maybe)
(global-set-key (kbd "\"") 'skeleton-pair-insert-maybe)

(setq tab-width 8
       indent-tabs-mode t
             c-basic-offset 8)

(setq default-tab-width 8)
(setq tab-stop-list ())
(setq standard-indent 8)

(defconst my-c-style
          '((c-tab-always-indent        . t)
            (c-comment-only-line-offset . 4)
            (c-hanging-braces-alist     . ((substatement-open after)
                                           (brace-list-open)))
            (c-hanging-colons-alist     . ((member-init-intro before)
                                           (inher-intro)
                                           (case-label after)
                                           (label after)
                                           (access-label after)))
            (c-cleanup-list             . (scope-operator
                                            empty-defun-braces
                                            defun-close-semi))
            (c-offsets-alist            . ((arglist-close . c-lineup-arglist)
                                           (substatement-open . 0)
                                           (case-label        . 4)
                                           (block-open        . 0)
                                           (knr-argdecl-intro . -)))
            (c-echo-syntactic-information-p . t)
            )
          "My C Programming Style")

(setq c-offsets-alist '((member-init-intro . ++)))
(setq c-basic-offset 8)

;;;;; c/c++ header include guard
(defun insert-include-guard ()
  "insert include guard for c and c++ header file."
  (interactive)
  (setq file-macro
	(concat (replace-regexp-in-string "\\." "_" (upcase (file-name-nondirectory buffer-file-name))) "_"))
  (setq guard-begin (concat "#ifndef " file-macro "\n"
			    "#define " file-macro "\n\n"))
  (setq guard-end
	(concat "\n\n#endif \/\/ " file-macro "\n"))
  (setq position (point))
  (goto-char (point-min))
  (insert guard-begin)
  (goto-char (point-max))
  (insert guard-end)
  (goto-char (+ position (length guard-begin))))

;; Customizations for all modes in CC Mode.
(defun my-c-mode-common-hook ()
  (c-add-style "PERSONAL" my-c-style t)
  (c-toggle-auto-hungry-state 1)
  (define-key c-mode-base-map "/C-m" 'c-context-line-break)
  )
(c-set-offset (quote cpp-macro) 0 nil)

(setq default-abbrev-mode t)
(setq abbrev-file-name             ;; tell emacs where to read abbrev
         "~/.emacs.d/abbrev_defs")    ;; definitions from...

(setq mouse-wheel-scroll-amount `(2))
(setq mouse-wheel-progressive-speed nil)
(mouse-wheel-mode 1)

(defadvice kill-region (before slickcut activate compile)
	   (interactive
	     (if mark-active (list (region-beginning) (region-end))
	       (list (line-beginning-position)
		     (line-beginning-position 2)))))

(defadvice kill-line (before check-position activate)
	   (if (member major-mode
		       '(emacs-lisp-mode scheme-mode lisp-mode
					 c-mode c++-mode objc-mode js-mode
					 latex-mode plain-tex-mode))
	     (if (and (eolp) (not (bolp)))
	       (progn (forward-char 1)
		      (just-one-space 0)
		      (backward-char 1)))))

(defadvice kill-ring-save (before slick-copy activate compile)
	   (interactive (if mark-active (list (region-beginning) (region-end))
			  (message "Copied line")
			  (list (line-beginning-position)
				(line-beginning-position 2)))))

(require 'highlight-symbol)
(global-set-key (kbd "<f1> <f1>") 'highlight-symbol-at-point)
(global-set-key (kbd "<f1> <f2>") 'highlight-symbol-prev)
(global-set-key (kbd "<f1> <f3>") 'highlight-symbol-next)
(global-set-key (kbd "<f1> <f4>") 'highlight-symbol-prev-in-defun)
(global-set-key (kbd "<f1> <f5>") 'highlight-symbol-next-in-defun)
(global-set-key (kbd "<f5> <f5>") 'revert-buffer-with-coding-system)

(setq tags-file-name "TAGS")

;; Mousewheel
(defun sd-mousewheel-scroll-up (event)
  "Scroll window under mouse up by five lines."
  (interactive "e")
  (let ((current-window (selected-window)))
    (unwind-protect
      (progn 
	(select-window (posn-window (event-start event)))
	(scroll-up 2))
      (select-window current-window))))

(defun sd-mousewheel-scroll-down (event)
  "Scroll window under mouse down by five lines."
  (interactive "e")
  (let ((current-window (selected-window)))
    (unwind-protect
      (progn 
	(select-window (posn-window (event-start event)))
	(scroll-down 2))
      (select-window current-window))))

(global-set-key (kbd "<mouse-5>") 'sd-mousewheel-scroll-up)
(global-set-key (kbd "<mouse-4>") 'sd-mousewheel-scroll-down)

(setq mouse-sel-mode t)

(require 'highlight-tail)
(setq highlight-tail-colors
      '(("black" . 0)
	("#bc2525" . 25)
	("black" . 66)))
	

(load-file "~/.emacs.d/elisp/tabbar.el")
(require 'tabbar)
(tabbar-mode)

(require 'session) ;;加载session
(add-hook 'after-init-hook 'session-initialize) ;; 启动时初始化session
(add-hook 'find-file-hooks 'auto-insert)
(customize-set-variable 'scroll-bar-mode' right)
(setq make-backup-files nil)
(setq auto-save-mode nil)
(setq make-backup-files nil)

'(auto-fill-mode t)


(defadvice kill-ring-save (before slickcopy activate compile)
           "When called interactively with no active region, copy a single line instead."
           (interactive
             (if mark-active (list (region-beginning) (region-end))
               (list (line-beginning-position)
                     (line-beginning-position 2)))))

(defadvice kill-region (before slickcut activate compile)
           "When called interactively with no active region, kill a single line instead."
           (interactive
             (if mark-active (list (region-beginning) (region-end))
               (list (line-beginning-position)
                     (line-beginning-position 2)))))
(put 'scroll-left 'disabled nil)

(add-hook 'c-mode-hook
          '(lambda ()
             (c-toggle-auto-state)))

(setq smart-compile-alist
      '( ("\\.rb$" . "spec %f")))


;; Lisp (SLIME) interaction
(setq inferior-lisp-program "clisp")
(add-to-list 'load-path "~/.emacs.d/plugins/slime")
;(require 'slime)
(require 'slime-autoloads)
(slime-setup)

(setq woman-default-indent 7            ;缩进格式
      woman-fill-frame t                ;填充满屏幕
      woman-use-own-frame nil           ;同一个frame
      woman-cache-level 3)              ;缓存级别, 最快


(require 'uniquify)
(setq uniquify-buffer-name-style 'forward)


(require 'session)
(add-hook 'after-init-hook 'session-initialize)

(global-set-key (kbd "C-x r C-@") 'rm-set-mark)
(global-set-key (kbd "C-x r C-x") 'rm-exchange-point-and-mark)
(global-set-key (kbd "C-x r C-w") 'rm-kill-region)
(global-set-key (kbd "C-x r M-w") 'rm-kill-ring-save)
(autoload 'rm-set-mark "rect-mark"
	  "Set mark for rectangle." t)
(autoload 'rm-exchange-point-and-mark "rect-mark"
	  "Exchange point and mark for rectangle." t)
(autoload 'rm-kill-region "rect-mark"
	  "Kill a rectangular region and save it in the kill ring." t)
(autoload 'rm-kill-ring-save "rect-mark"
	  "Copy a rectangular region to the kill ring." t)

(setq bookmark-save-flag 1)
(global-cwarn-mode 1)

;;ibuffer
(require 'ibuffer)
(global-set-key (kbd "<f2> <f2>") 'ibuffer)

(require 'multi-term)
(setq multi-term-program "/bin/bash")
(setq term-eol-on-send t)

(require 'git)
(require 'git-blame)
(setq save-place-file "~/.emacs.d/saveplace")
(require 'saveplace)
(setq-default save-place t)

(defun lisp-indent-or-complete (&optional arg)
 (interactive "p")
 (if (or (looking-back "^\\s-*") (bolp))
  (call-interactively 'lisp-indent-line)
  (call-interactively 'slime-indent-and-complete-symbol)))
(eval-after-load "lisp-mode"
 '(progn
	 (define-key lisp-mode-map (kbd "TAB") 'lisp-indent-or-complete)))

(add-hook 'c-mode-hook '(lambda() (c-set-style "linux")))
(add-hook 'c-mode-hook (lambda () (local-set-key [(return)] 'newline-and-indent) ))
; (add-hook 'c-mode-hook (lambda () (setq comment-column 48) ))
(add-hook 'perl-mode-hook (lambda () (local-set-key [(return)] 'newline-and-indent) ))
; (add-hook 'perl-mode-hook (lambda () (setq comment-column 48) ))

(global-set-key "\C-m" 'newline-and-indent)
(global-set-key "\C-j" 'newline)

(require 'auto-complete)
(add-to-list 'load-path "~/.emacs.d/plugins/auto-complete")
(require 'auto-complete-config)
(add-to-list 'ac-dictionary-directories "~/.emacs.d/ac-dict")
(ac-config-default)
(ac-set-trigger-key "TAB")

(add-to-list 'load-path "~/.emacs.d/plugins/yasnippet-0.6.1c")
(require 'yasnippet)
(yas/initialize)
(yas/load-directory "~/.emacs.d/plugins/yasnippet-0.6.1c/snippets/text-mode")

(require 'whitespace)
(setq whitespace-style '(face trailing space-before-tab))
(add-hook 'c-mode-hook 'whitespace-mode)

(global-set-key (kbd "<f2> a") 'windmove-left)         ; move to left windnow
(global-set-key (kbd "<f2> d") 'windmove-right)        ; move to right window
(global-set-key (kbd "<f2> w") 'windmove-up)           ; move to upper window
(global-set-key (kbd "<f2> s") 'windmove-down)         ; move to downer window

(define-key global-map "\M-[1~" 'beginning-of-line)
(define-key global-map [select] 'end-of-line)

(require 'undo-tree)
(global-undo-tree-mode)

(require 'cflow-mode)
(defvar cmd nil nil)
(defvar cflow-buf nil nil)
(defvar cflow-buf-name nil nil)
(defun cflow-function (function-name)
  "Get call graph of inputed function. "
  ;(interactive "sFunction name:\n")
  (interactive (list (car (senator-jump-interactive "Function name: "
                                                    nil nil nil))))
  (setq cmd (format "cflow  -b --main=%s %s" function-name buffer-file-name))
  (setq cflow-buf-name (format "**cflow-%s:%s**"
                               (file-name-nondirectory buffer-file-name)
                               function-name))
  (setq cflow-buf (get-buffer-create cflow-buf-name))
  (set-buffer cflow-buf)
  (setq buffer-read-only nil)
  (erase-buffer)
  (insert (shell-command-to-string cmd))
  (pop-to-buffer cflow-buf)
  (goto-char (point-min))
  (cflow-mode))

(require 'cursor-change)
(cursor-change-mode t)

(require 'highlight-current-line)
(highlight-current-line-on t)  
(set-face-background 'highlight-current-line-face "#333333")

(require 'highlight-parentheses)
(define-globalized-minor-mode global-highlight-parentheses-mode
  highlight-parentheses-mode
  (lambda ()
    (highlight-parentheses-mode t)))
(global-highlight-parentheses-mode t)

;; set recent-jump
(setq rj-ring-length 10000)
(require 'recent-jump)
(global-set-key (kbd "M-,") 'recent-jump-backward)
(global-set-key (kbd "M-.") 'recent-jump-forward)
(recent-jump-mode t)

(require 'zjl-hl)
;(zjl-hl-enable-global-all-modes)

(defun confirm-exit-emacs ()
  "ask for confirmation before exiting emacs"
  (interactive)
  (if (yes-or-no-p "Are you sure you want to exit? ")
    (save-buffers-kill-emacs)))

(global-unset-key "\C-x\C-c")
(global-set-key "\C-x\C-c" 'confirm-exit-emacs)
